{"version":3,"sources":["api.js","actions/stateAction.js","components/State.js","actions/stateDataHistoryAction.js","useLocalStorage.js","StateCodeStateCode.js","actions/codeInitialAction.js","components/DataCards.js","components/HomeGraphs.js","pages/Home.js","components/TopBar.js","components/Announcement.js","App.js","reportWebVitals.js","reducers/stateDataReducer.js","reducers/stateDataHistoryReducer.js","reducers/stateCodeInitialsReducer.js","reducers/stateURLReducer.js","reducers/index.js","index.js"],"names":["state_initials","JSON","parse","localStorage","getItem","state_code","state","state_URL","loadStateData","dispatch","a","axios","get","stateData","type","payload","totalCases","data","actuals","cases","totalDeaths","deaths","newCases","newDeaths","caseDensity","metrics","infectionRate","icuCapacityRatio","vaccinationsInitiatedRatio","vaccinationsCompletedRatio","date","lastUpdatedDate","State","loadStateDataHistory","stateDataHistory","historyActuals","actualsTimeseries","historyMetrics","metricsTimeseries","useLocalStorage","key","initialValue","useState","Function","getSavedValue","value","setValue","useEffect","setItem","stringify","makeStyles","theme","StateSelector","styled","div","connect","codeInitialsTest","useDispatch","setState","useSelector","stateInitials","onStateChange","event","code","target","console","log","Object","values","b","window","location","reload","Select","style","minWidth","displayEmpty","variant","onChange","MenuItem","useStyles","container","display","flexDirection","justifyContent","justify","alignItems","width","height","padding","grid","spacing","breakpoints","between","card","cardContent","backgroundColor","cardContent2","marginLeft","marginRight","typography","DataCards","classes","loading","stateDataHistoryActuals","stateHistory","stateDataHistoryMetrics","map","point","casesData","i","length","newRow","name","push","deathsData","newCasesData","newDeathsData","caseDensityData","infectionRateData","icuCapacityRatioData","vaccinationsInitiatedRatioData","vaccinationsCompletedRatioData","verifyData","val","undefined","isNaN","stateDataToday","Grid","className","xs","sm","md","item","Card","CardContent","Typography","align","color","gutterBottom","paragraph","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","axisLine","tickLine","tickCount","tickFormatter","str","parseISO","getDate","format","YAxis","num","Math","round","CartesianGrid","opacity","vertical","toFixed","motion","Home","TopBar","TopBarContainer","AnnouncementContainer","Announcement","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","stateDataReducer","action","stateDataHistoryReducer","stateCodeInitialsReducer","stateURL","stateURLReducer","rootReducer","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEaA,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,SACxDC,EAAU,UAAML,GAIhBM,EAAK,iBAAaD,EAAb,mCANE,oCAQAE,EAAY,2BAJX,kCAIW,OAAoBD,ICJhCE,EAAgB,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEAEPC,IAAMC,IAAIL,KAFH,OAEzBM,EAFyB,OAG/BJ,EAAS,CACLK,KAAM,mBACNC,QAAS,CAELC,WAAYH,EAAUI,KAAKC,QAAQC,MACnCC,YAAaP,EAAUI,KAAKC,QAAQG,OACpCC,SAAUT,EAAUI,KAAKC,QAAQI,SACjCC,UAAWV,EAAUI,KAAKC,QAAQK,UAClCC,YAAaX,EAAUI,KAAKQ,QAAQD,YACpCE,cAAeb,EAAUI,KAAKQ,QAAQC,cACtCC,iBAAkBd,EAAUI,KAAKQ,QAAQE,iBACzCC,2BAA4Bf,EAAUI,KAAKQ,QAAQG,2BACnDC,2BAA4BhB,EAAUI,KAAKQ,QAAQI,2BACnDC,KAAMjB,EAAUI,KAAKc,mBAhBE,2CAAN,uD,OCQdC,I,iBCRFC,EAAuB,yDAAM,WAAOxB,GAAP,eAAAC,EAAA,sEAEPC,IAAMC,IAAIL,KAFH,OAEhC2B,EAFgC,OAGtCzB,EAAS,CACLK,KAAM,2BACNC,QAAS,CAELoB,eAAgBD,EAAiBjB,KAAKmB,kBACtCC,eAAgBH,EAAiBjB,KAAKqB,qBARR,2CAAN,uD,6HCKrB,SAASC,EAAgBC,EAAKC,GAAe,IAAD,EAC7BC,oBAAS,WAC/B,OAVR,SAAuBF,EAAKC,GAExB,OADmBxC,KAAKC,MAAMC,aAAaC,QAAQoC,MAG/CC,aAAwBE,SAAiBF,IACtCA,GAKIG,CAAcJ,EAAKC,MAFyB,mBAChDI,EADgD,KACzCC,EADyC,KASvD,OAJAC,qBAAU,WACV5C,aAAa6C,QAAQR,EAAKvC,KAAKgD,UAAUJ,MACtC,CAACA,IAEG,CAACA,EAAOC,G,yCCPDI,aAAW,SAACC,GAAD,MAAY,MAqGzC,IAMMC,EAAgBC,IAAOC,IAAV,mTAeJC,eArBS,SAAAjD,GACpB,MAAO,CACHkD,iBAAkBlD,EAAMkD,oBAmBjBD,EAtHf,WACI,IAAM9C,EAAWgD,cADS,EAEAlB,EAAgB,OAAQ,IAFxB,mBAEnBjC,EAFmB,KAEZoD,EAFY,KAK1BX,qBAAU,WACNtC,EClBwB,uCAAM,WAAOA,GAAP,SAAAC,EAAA,sDAElCD,EAAS,CACLK,KAAM,oBACNC,QAAS,CAELyC,iBALS,QADiB,2CAAN,yDDmBvB,CAAC/C,IAPoB,IASlB+C,EAAqBG,aACzB,SAACrD,GAAD,OAAWA,EAAMsD,iBADbJ,iBAIFK,EAAa,uCAAG,WAAOC,GAAP,MAAApD,EAAA,WAAAA,EAAA,sDAClBqD,EAAOD,EAAME,OAAOnB,MACxBoB,QAAQC,IAAIjE,KAAKgD,UAAU,CAACc,UAC5BE,QAAQC,IAAIC,OAAOC,OAAOL,IACtBrD,EAAIyD,OAAOC,OAAOL,GACtBE,QAAQC,IAAIxD,GACZuD,QAAQC,IAAIxD,EAAE,GAAKA,EAAE,IACjB2D,EAAI3D,EAAE,GAAKA,EAAE,GACjBuD,QAAQC,IAAIG,GACZJ,QAAQC,IAAI,IAAIG,EAAE,KAElBX,EADmBW,GAMnBC,OAAOC,SAASC,SAhBM,4CAAH,sDAqBnB,OAFJP,QAAQC,IAAR,UAAejE,KAAKC,MAAMC,aAAaC,QAAQ,WAC/C6D,QAAQC,IAAIV,GAEJ,mCACA,cAAC,IAAD,UACI,cAACJ,EAAD,UACJ,eAACqB,EAAA,EAAD,CAAQC,MAAO,CAACC,SAAU,KAAM9B,MAAOvC,EAAOsE,cAAY,EAACC,QAAQ,WAAWC,SAAUjB,EAAxF,UACI,cAACkB,EAAA,EAAD,CAAUlC,MAAM,GAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,oBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,wBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,yBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,oBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,mBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,kBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,oBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,uBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,mBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,2BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,uBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,yBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,oBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,2BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,wBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,wBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,4BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,kBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,oBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,4BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,uBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,mBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,kBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,qBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,sBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,wBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,0BACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,uBACA,cAACkC,EAAA,EAAD,CAAUlC,MAAM,KAAhB,iCEtFNmC,EAAY9B,aAAW,SAACC,GAAD,MAAY,CACrC8B,UAAW,CACPC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,QAAS,eACTC,WAAY,SACZC,MAAO,OACPC,OAAQ,OACRC,QAAS,oBAEbC,KAAK,aACDH,MAAO,OACPC,OAAQ,OACRC,QAAStC,EAAMwC,QAAQ,IACtBxC,EAAMyC,YAAYC,QAAQ,MAAO,SAAW,CACzCJ,QAAStC,EAAMwC,QAAQ,KAG/BG,KAAM,CACFP,MAAO,OACPC,OAAQ,OACRC,QAAStC,EAAMwC,QAAQ,GACvBT,QAAS,OACTE,eAAgB,UAEpBW,YAAa,CACTR,MAAO,OACPC,OAAQ,OACRQ,gBAAiB,SAErBC,aAAc,CACVV,MAAO,OACPC,OAAQ,OACRU,WAAY,MACZC,YAAa,OACbH,gBAAiB,SAErBI,WAAY,OA8pBDC,I,IAAAA,EAxpBf,WAEI,IAAM5F,EAAWgD,cACX6C,EAAUtB,IAHC,EAIatC,oBAAS,GAJtB,mBAIV6D,EAJU,aAKS7D,sBALT,gCAMOA,sBANP,gCAO+BA,sBAP/B,6BAcjBK,qBAAU,WACNtC,EAASD,OACR,CAACC,IAhBW,IAkBP+F,EAA4B7C,aAChC,SAACrD,GAAD,OAAWA,EAAMmG,gBADbD,wBAIRzD,qBAAU,WACRtC,EAASwB,OACR,CAACxB,IAsBN,IA9CiB,IA0BPiG,EAA4B/C,aAChC,SAACrD,GAAD,OAAWA,EAAMmG,gBADbC,wBAMJvF,EAAQqF,EAAwBG,KAAI,SAACC,GAAD,OAAWA,EAAMzF,SACrDE,EAASmF,EAAwBG,KAAI,SAACC,GAAD,OAAWA,EAAMvF,UACtDC,EAAWkF,EAAwBG,KAAI,SAACC,GAAD,OAAWA,EAAMtF,YACxDC,EAAYiF,EAAwBG,KAAI,SAACC,GAAD,OAAWA,EAAMrF,aAEzDC,EAAckF,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAMpF,eAC3DE,EAAgBgF,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAMlF,iBAC7DC,EAAmB+E,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAMjF,oBAChEC,EAA6B8E,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAMhF,8BAC1EC,EAA6B6E,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAM/E,8BAC1EC,EAAO4E,EAAwBC,KAAI,SAACC,GAAD,OAAWA,EAAM9E,QAGpD+E,EAAY,GACTC,EAAI,EAAGA,EAAIhF,EAAKiF,OAAQD,IAAK,CAClC,IAAME,EAAS,GACfA,EAAOC,KAAOnF,EAAKgF,GACnBE,EAAO/F,KAAOE,EAAM2F,GACpBD,EAAUK,KAAKF,GAInB,IADA,IAAMG,EAAa,GACVL,EAAI,EAAGA,EAAIhF,EAAKiF,OAAQD,IAAK,CAClC,IAAME,EAAS,GACfA,EAAOC,KAAOnF,EAAKgF,GACnBE,EAAO/F,KAAOI,EAAOyF,GACrBK,EAAWD,KAAKF,GAIpB,IADA,IAAMI,EAAe,GACZN,EAAI,EAAGA,EAAIhF,EAAKiF,OAAQD,IAAK,CAClC,IAAME,EAAS,GACfA,EAAOC,KAAOnF,EAAKgF,GACnBE,EAAO/F,KAAOK,EAASwF,GACvBM,EAAaF,KAAKF,GAItB,IADA,IAAMK,EAAgB,GACbP,EAAI,EAAGA,EAAIhF,EAAKiF,OAAQD,IAAK,CAClC,IAAME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,GACnBE,GAAO/F,KAAOM,EAAUuF,GACxBO,EAAcH,KAAKF,IAIvB,IADA,IAAMM,GAAkB,GACfR,GAAI,EAAGA,GAAIhF,EAAKiF,OAAQD,KAAK,CAClC,IAAME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,IACnBE,GAAO/F,KAAOO,EAAYsF,IAC1BQ,GAAgBJ,KAAKF,IAIzB,IADA,IAAMO,GAAoB,GACjBT,GAAI,EAAGA,GAAIhF,EAAKiF,OAAQD,KAAK,CAClC,IAAME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,IACnBE,GAAO/F,KAAOS,EAAcoF,IAC5BS,GAAkBL,KAAKF,IAI3B,IADA,IAAMQ,GAAuB,GACpBV,GAAI,IAAKA,GAAIhF,EAAKiF,OAAQD,KAAK,CACpC,IACME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,IACnBE,GAAO/F,KAAOU,EAAiBmF,IAC/BU,GAAqBN,KAAKF,IAK9B,IADA,IAAMS,GAAiC,GAC9BX,GAAI,IAAKA,GAAIhF,EAAKiF,OAAQD,KAAK,CACpC,IAAME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,IACnBE,GAAO/F,KAAOW,EAA2BkF,IACzCW,GAA+BP,KAAKF,IAIxC,IADA,IAAMU,GAAiC,GAC9BZ,GAAI,IAAKA,GAAIhF,EAAKiF,OAAQD,KAAK,CACpC,IAAME,GAAS,GACfA,GAAOC,KAAOnF,EAAKgF,IACnBE,GAAO/F,KAAOY,EAA2BiF,IACzCY,GAA+BR,KAAKF,IAUxC,SAASW,GAAWC,GAChB,OAAY,OAARA,QAGaC,IAARD,GAGAE,MAAMF,GALJ,EAQJA,EAmBX7E,qBAAU,WACRtC,EAASD,OACR,CAACC,IA7Ja,IA+JTI,GAAc8C,aAClB,SAACrD,GAAD,OAAWA,EAAMyH,kBADblH,UAGR,OAAI0F,EACO,kDAQP,qCACA,cAAC,EAAD,IACA,eAACyB,EAAA,EAAD,CAAMC,UAAW3B,EAAQrB,UAAWU,QAAS,EAAGV,WAAS,EAAzD,UACI,cAAC+C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACI,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACI,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACA,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,4BAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAW9G,GAAUG,cAE1B,cAACwH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,wGAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAM4F,EAA9F,UACA,+BACI,iCAAgBuC,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,6BAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAW9G,GAAUO,eAE1B,cAACoH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,yGAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMkG,EAA9F,UACA,+BACI,iCAAgBiC,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,6BAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAW9G,GAAUS,YAE1B,cAACkH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,uDAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMmG,EAA9F,UACA,+BACI,iCAAgBgC,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,wBAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAW9G,GAAUU,aAE1B,cAACiH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,wDAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMoG,EAA9F,UACA,+BACI,iCAAgB+B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAMnD,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACI,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,mCAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAWgD,KAAKC,MAAM/J,GAAUW,gBAErC,cAACgH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,8DAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMqG,GAA9F,UACA,+BACI,iCAAgB8B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,4BAGA,cAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,SACKhB,GAAW9G,GAAUa,eAAesJ,QAAQ,KAEjD,cAACxC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,uDAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMsG,GAA9F,UACA,+BACI,iCAAgB6B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEAA,EAAQ,IACF,GAAN,OAAU8H,KAAKC,MAAM/H,EAAQ,KAA7B,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,0BAGA,eAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,UACKhB,GAAWgD,KAAKC,MAAsC,IAA9B/J,GAAUc,mBADvC,OAGA,cAAC6G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,gDAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMuG,GAA9F,UACA,+BACI,iCAAgB4B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,EACF,GAAN,OAAU8H,KAAKC,MAAc,IAAR/H,GAArB,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,mCAGA,eAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,UACKhB,GAAWgD,KAAKC,MAAgD,IAAxC/J,GAAUe,6BADvC,OAGA,cAAC4G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,wFAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMwG,GAA9F,UACA,+BACI,iCAAgB2B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,EACF,GAAN,OAAU8H,KAAKC,MAAc,IAAR/H,GAArB,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,gBAM/C,cAAC/C,EAAA,EAAD,CAAMC,UAAW3B,EAAQZ,KAAMwC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAzD,SACA,cAACC,EAAA,EAAD,CAAML,UAAW3B,EAAQR,KAAzB,SACI,eAACyC,EAAA,EAAD,CAAaN,UAAW3B,EAAQP,YAAhC,UACE,eAACwC,EAAA,EAAD,CAAaN,UAAW3B,EAAQL,aAAhC,UACE,cAACuC,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,gCAGA,eAACH,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,cAAcC,cAAY,EAAtE,UACKhB,GAAWgD,KAAKC,MAAgD,IAAxC/J,GAAUgB,6BADvC,OAGA,cAAC2G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBC,cAAY,EAAxE,SACK9H,GAAUiB,OAEf,cAAC0G,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,EAArE,qEAIA,cAACC,EAAA,EAAD,CAAqBtD,MAAO,OAAQC,OAAQ,IAA5C,SACA,eAACsD,EAAA,EAAD,CAAWC,OAAQ,CAACC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,GAAM5D,MAAO,IAAKC,OAAQ,IAAKvE,KAAMyG,GAA9F,UACA,+BACI,iCAAgB0B,GAAG,QAAQC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAnD,UACI,sBAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,OACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,IACpD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,SAI5D,cAACC,EAAA,EAAD,CAAM9I,KAAK,WAAW+I,QAAQ,OAAOC,OAAO,UAAUC,KAAK,eAC3D,cAACC,EAAA,EAAD,CAAOH,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAC,GAAQ,IAAMvI,EAAOwI,YAASD,GACnH,OAAIvI,EAAKyI,UAAW,IAAM,EACfC,YAAO1I,EAAM,UAEb,MAGX,cAAC2I,EAAA,EAAD,CAAOZ,QAAQ,OAAOI,UAAU,EAAOC,UAAU,EAAOC,UAAW,EAAGC,cAAe,SAAAM,GAAO,IAAM7H,EAAQ6H,EAC1G,OAAI7H,EAAQ,EACF,GAAN,OAAU8H,KAAKC,MAAc,IAAR/H,GAArB,KAEGA,KAGP,cAACgI,EAAA,EAAD,CAAeC,QAAS,GAAKC,UAAU,uB,gBCzkB1C1H,YAAO4H,IAAO3H,IAAdD,CAAH,8BAIHA,YAAO4H,IAAO3H,IAAdD,CAAH,8BCpGG6H,I,EAAAA,EANf,WACI,OACI,cAAC,EAAD,KCGOC,I,IAAAA,EAXf,WACI,OACI,cAACC,GAAD,UACI,yCAEI,iDASVA,GAAkB/H,IAAOC,IAAV,oZCHrB,IAAMgF,GAAOjF,IAAOC,IAAV,+NAWJ+H,GAAwBhI,IAAOC,IAAV,0tBAkCZgI,GA3Df,WACI,OACI,mCACI,cAAC,GAAD,UACI,eAACD,GAAD,WACI,iDACA,0SCULE,OAVf,WACE,OACA,qCACI,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,QCFSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuB9I,UACxC,8BAAqB+I,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCPRO,GAAY,CAAEnL,UAAW,IAuBhBoL,GApBU,WAA8B,IAA7B3L,EAA4B,uDAAtB0L,GAAWE,EAAW,uCAClD,OAAOA,EAAOpL,MACV,IAAK,mBACD,OAAO,6BAAIR,GAAX,IACAO,UAAWqL,EAAOnL,UAEtB,QACI,OAAO,gBAAIT,KCVjB0L,GAAY,CAAExF,wBAAyB,GAAIE,wBAAyB,IAsB3DyF,GAnBiB,WAA8B,IAA7B7L,EAA4B,uDAAtB0L,GAAWE,EAAW,uCACzD,OAAOA,EAAOpL,MACV,IAAK,2BACD,OAAO,6BAAIR,GAAX,IACAkG,wBAAyB0F,EAAOnL,QAAQoB,eACxCuE,wBAAyBwF,EAAOnL,QAAQsB,iBAE5C,QACI,OAAO,gBAAI/B,KCXjB0L,GAAY,CAAExI,iBAAkB,IAcvB4I,GAXkB,WAA8B,IAA7B9L,EAA4B,uDAAtB0L,GAAWE,EAAW,uCAC1D,OAAOA,EAAOpL,MACV,IAAK,oBACD,OAAO,6BAAIR,GAAX,IACIkD,iBAAkB0I,EAAOnL,UAEjC,QACI,OAAO,gBAAIT,KCVjB0L,GAAY,CAAEK,SAAU,IAcfC,GAXS,WAA8B,IAA7BhM,EAA4B,uDAAtB0L,GAAWE,EAAW,uCACjD,OAAOA,EAAOpL,MACV,IAAK,gBACD,OAAO,6BAAIR,GAAX,IACI+L,SAAUH,EAAOnL,UAEzB,QACI,OAAO,gBAAIT,KCIRiM,GAPKC,aAAgB,CAChCzE,eAAgBkE,GAChBxF,aAAc0F,GACdvI,cAAewI,GACfC,SAAUC,K,UCDRG,GAAkBnI,OAAOoI,sCAAwCC,KAEjEC,GAAQC,aACZN,GACAE,GAAgBK,aAAgBC,QAGlCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACA,cAAC,GAAD,QAGFO,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.741c2271.chunk.js","sourcesContent":["//API key = a9eb28cd3ef74d2baf520bb9c6607ceb\r\nconst auth = \"a9eb28cd3ef74d2baf520bb9c6607ceb\";\r\nexport const state_initials = JSON.parse(localStorage.getItem('name'));\r\nconst state_code = `${state_initials}`;\r\n// Base URL\r\nconst base_url = `https://api.covidactnow.org/v2`\r\n// State data\r\nconst state = `/state/${state_code}.timeseries.json?apiKey=${auth}`;\r\n// STATE DATA\r\nexport const state_URL = () => `${base_url}${state}`;\r\n\r\n{/* dispatch({\r\n    type: \"GET_STATE_URL\",\r\n    payload: state_URL\r\n  });\r\n\r\n*/}","import axios from 'axios';\r\nimport { state_URL } from '../api';\r\n\r\n//Action creator\r\n\r\nexport const loadStateData = () => async (dispatch) => {\r\n    //Fetch axios\r\n    const stateData = await axios.get(state_URL())\r\n    dispatch({\r\n        type: \"FETCH_STATE_DATA\",\r\n        payload: {\r\n            //specify the exact data so that you can achieve array form\r\n            totalCases: stateData.data.actuals.cases,\r\n            totalDeaths: stateData.data.actuals.deaths,\r\n            newCases: stateData.data.actuals.newCases,\r\n            newDeaths: stateData.data.actuals.newDeaths,\r\n            caseDensity: stateData.data.metrics.caseDensity,\r\n            infectionRate: stateData.data.metrics.infectionRate,\r\n            icuCapacityRatio: stateData.data.metrics.icuCapacityRatio,\r\n            vaccinationsInitiatedRatio: stateData.data.metrics.vaccinationsInitiatedRatio,\r\n            vaccinationsCompletedRatio: stateData.data.metrics.vaccinationsCompletedRatio,\r\n            date: stateData.data.lastUpdatedDate\r\n        },\r\n\r\n    });\r\n};\r\n\r\n{/* \r\n\r\n            totalCases: stateData.data.actuals.cases,\r\n            totalDeaths: stateData.data.actuals.deaths,\r\n            newCases: stateData.data.actuals.newCases,\r\n            newDeaths: stateData.data.actuals.newDeaths,\r\n            infectionRate: stateData.data.metrics.infectionRate,\r\n            icuCapacityRatio: stateData.data.metrics.icuCapacityRatio,\r\n            vaccinationsInitiatedRatio: stateData.data.metrics.vaccinationsInitiatedRatio,\r\n            vaccinationsCompletedRatio: stateData.data.metrics.vaccinationsCompletedRatio,\r\n\r\n*/}","import React from 'react';\r\n//STYLE AND ANIMATION\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n\r\nfunction State() {\r\n    return (\r\n        <div>\r\n            <h3>State Info</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default State;","  import axios from 'axios';\r\nimport { state_URL } from '../api';\r\n\r\n//Action creator\r\n\r\nexport const loadStateDataHistory = () => async (dispatch) => {\r\n    //Fetch axios\r\n    const stateDataHistory = await axios.get(state_URL())\r\n    dispatch({\r\n        type: \"FETCH_STATE_DATA_HISTORY\",\r\n        payload: {\r\n            // TIMESERIES (HISTORY DATA)\r\n            historyActuals: stateDataHistory.data.actualsTimeseries,\r\n            historyMetrics: stateDataHistory.data.metricsTimeseries\r\n        },\r\n\r\n    });\r\n};\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getSavedValue(key, initialValue) {\r\n    const savedValue = JSON.parse(localStorage.getItem(key))\r\n    if (savedValue) return savedValue\r\n\r\n    if (initialValue instanceof Function) return initialValue()\r\n    return initialValue\r\n}\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const [value, setValue] = useState(() => {\r\n        return getSavedValue(key, initialValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n    }, [value])\r\n\r\n    return [value, setValue]\r\n}","import React, { useState, useEffect } from 'react'\r\nimport useLocalStorage from './useLocalStorage';\r\nimport { Grid, Container, Paper, Typography, Card, CardContent, MenuItem, Menu, Select } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {   Formik, Field, Form, FieldAttributes, FieldArray } from 'formik';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { loadCodeInitials } from './actions/codeInitialAction';\r\nimport { loadStateData } from './actions/stateAction';\r\nimport { loadStateDataHistory } from './actions/stateDataHistoryAction';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n}));\r\n\r\nfunction StateCodeStateCode() {\r\n    const dispatch = useDispatch();\r\n    const [state, setState] = useLocalStorage('name', '');\r\n    const aaa = 12;\r\n\r\n    useEffect(() => {\r\n        dispatch(loadCodeInitials());\r\n      }, [dispatch]);\r\n    \r\n    const { codeInitialsTest } = useSelector(\r\n        (state) => state.stateInitials //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n    );\r\n\r\n    const onStateChange = async (event) => {\r\n    var code = event.target.value;\r\n    console.log(JSON.stringify({code}));\r\n    console.log(Object.values(code));\r\n    var a = Object.values(code)\r\n    console.log(a);\r\n    console.log(a[0] + a[1])\r\n    var b = a[0] + a[1];\r\n    console.log(b);\r\n    console.log('\"'+b+'\"');\r\n    var codeInitials = b;\r\n    setState(codeInitials);\r\n    //dispatch({\r\n    //    type: \"GET_CODE_INITIALS\",\r\n    //    payload: codeInitials\r\n    // });\r\n    window.location.reload();\r\n}\r\n\r\nconsole.log(`${JSON.parse(localStorage.getItem('name'))}`);\r\nconsole.log(codeInitialsTest);\r\n    return (\r\n        <>\r\n        <Formik>\r\n            <StateSelector>\r\n        <Select style={{minWidth: 200}} value={state} displayEmpty variant=\"outlined\" onChange={onStateChange}>\r\n            <MenuItem value=\"\">Pick a state</MenuItem>\r\n            <MenuItem value=\"AL\">Alabama</MenuItem>\r\n            <MenuItem value=\"AK\">Alaska</MenuItem>\r\n            <MenuItem value=\"AZ\">Arizona</MenuItem>\r\n            <MenuItem value=\"AR\">Arkansas</MenuItem>\r\n            <MenuItem value=\"CA\">California</MenuItem>\r\n            <MenuItem value=\"CO\">Colorado</MenuItem>\r\n            <MenuItem value=\"CT\">Connecticut</MenuItem>\r\n            <MenuItem value=\"DE\">Delaware</MenuItem>\r\n            <MenuItem value=\"FL\">Florida</MenuItem>\r\n            <MenuItem value=\"GA\">Georgia</MenuItem>\r\n            <MenuItem value=\"HI\">Hawaii</MenuItem>\r\n            <MenuItem value=\"ID\">Idaho</MenuItem>\r\n            <MenuItem value=\"IL\">Illinois</MenuItem>\r\n            <MenuItem value=\"IN\">Indiana</MenuItem>\r\n            <MenuItem value=\"IA\">Iowa</MenuItem>\r\n            <MenuItem value=\"KS\">Kansas</MenuItem>\r\n            <MenuItem value=\"KY\">Kentucky</MenuItem>\r\n            <MenuItem value=\"LA\">Louisiana</MenuItem>\r\n            <MenuItem value=\"ME\">Maine</MenuItem>\r\n            <MenuItem value=\"MD\">Maryland</MenuItem>\r\n            <MenuItem value=\"MA\">Massachusetts</MenuItem>\r\n            <MenuItem value=\"MI\">Michigan</MenuItem>\r\n            <MenuItem value=\"MN\">Minnesota</MenuItem>\r\n            <MenuItem value=\"MS\">Mississippi</MenuItem>\r\n            <MenuItem value=\"MO\">Missouri</MenuItem>\r\n            <MenuItem value=\"MT\">Montana</MenuItem>\r\n            <MenuItem value=\"NE\">Nebraska</MenuItem>\r\n            <MenuItem value=\"NV\">Nevada</MenuItem>\r\n            <MenuItem value=\"NH\">New Hampshire</MenuItem>\r\n            <MenuItem value=\"NJ\">New Jersey</MenuItem>\r\n            <MenuItem value=\"NM\">New Mexico</MenuItem>\r\n            <MenuItem value=\"NY\">New York</MenuItem>\r\n            <MenuItem value=\"NC\">North Carolina</MenuItem>\r\n            <MenuItem value=\"ND\">North Dakota</MenuItem>\r\n            <MenuItem value=\"OH\">Ohio</MenuItem>\r\n            <MenuItem value=\"OK\">Oklahoma</MenuItem>\r\n            <MenuItem value=\"OR\">Oregon</MenuItem>\r\n            <MenuItem value=\"PA\">Pennsylvania</MenuItem>\r\n            <MenuItem value=\"RI\">Rhode Island</MenuItem>\r\n            <MenuItem value=\"SC\">South Carolina</MenuItem>\r\n            <MenuItem value=\"SD\">South Dakota</MenuItem>\r\n            <MenuItem value=\"TN\">Tennessee</MenuItem>\r\n            <MenuItem value=\"TX\">Texas</MenuItem>\r\n            <MenuItem value=\"UT\">Utah</MenuItem>\r\n            <MenuItem value=\"VT\">Vermont</MenuItem>\r\n            <MenuItem value=\"VA\">Virginia</MenuItem>\r\n            <MenuItem value=\"WA\">Washington</MenuItem>\r\n            <MenuItem value=\"WV\">West Virgina</MenuItem>\r\n            <MenuItem value=\"WI\">Wisconsin</MenuItem>\r\n            <MenuItem value=\"WY\">Wyoming</MenuItem>\r\n        </Select>\r\n            </StateSelector>\r\n        </Formik>\r\n    </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        codeInitialsTest: state.codeInitialsTest\r\n    }\r\n}\r\n\r\nconst StateSelector = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 20%;\r\n    margin-top: 45px;\r\n    margin-bottom: 45px;\r\n    @media (max-width: 600px) {\r\n    margin-top: 30px;\r\n    margin-bottom: 30px;\r\n    }\r\n`;\r\n\r\nexport default connect (mapStateToProps) (StateCodeStateCode);\r\n","import axios from 'axios';\r\nimport { state_URL } from '../api';\r\n\r\n\r\nexport const loadCodeInitials = () => async (dispatch) => {\r\n    const codeTest = \"AL\";\r\n    dispatch({\r\n        type: \"GET_CODE_INITIALS\",\r\n        payload: {\r\n            //specify the exact data so that you can achieve array form\r\n            codeInitialsTest: codeTest\r\n        },\r\n\r\n    });\r\n};","import '../App.css';\r\n//REDUX\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadStateData } from '../actions/stateAction';\r\nimport { loadStateDataHistory } from '../actions/stateDataHistoryAction';\r\nimport State from '../components/State';\r\n//STYLING\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n//MATERIAL-UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Container, Paper, Typography, Card, CardContent, MenuItem, Menu, Select } from '@material-ui/core';\r\nimport { ResponsiveContainer, AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip  } from 'recharts';\r\n//FORMIK\r\nimport { format, parseISO, subDays } from 'date-fns';\r\nimport StateCodeStateCode from '../StateCodeStateCode';\r\nimport {state_initials} from '../api.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        justify: 'space-evenly',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: '0px 0px 5px 30px'\r\n    },\r\n    grid: {\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.between('0px', '750px')]: {\r\n            padding: theme.spacing(1),\r\n      },\r\n    },\r\n    card: {\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: theme.spacing(1),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    cardContent: {\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'white',\r\n    },\r\n    cardContent2: {\r\n        width: '100%',\r\n        height: '100%',\r\n        marginLeft: '5px',\r\n        marginRight: '25px',\r\n        backgroundColor: 'white',\r\n    },\r\n    typography: {\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction DataCards() {\r\n        //FETCH STATE DATA\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n    const [data, setData] = useState();\r\n    const [apiStateInitials, setApiStateInitials] = useState();\r\n    \r\n    {/* for (let i = 0; i < 1; i++) {\r\n    setApiStateInitials(state_initials);\r\n    }\r\n*/}\r\n\r\n    useEffect(() => {\r\n        dispatch(loadStateData());\r\n      }, [dispatch]);\r\n      // GET DATA\r\n      const { stateDataHistoryActuals } = useSelector(\r\n          (state) => state.stateHistory //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n      );\r\n\r\n      useEffect(() => {\r\n        dispatch(loadStateDataHistory());\r\n      }, [dispatch]);\r\n      // GET DATA\r\n      const { stateDataHistoryMetrics } = useSelector(\r\n          (state) => state.stateHistory //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n      );\r\n\r\n\r\n    //ACTUALS DATA\r\n    const cases = stateDataHistoryActuals.map((point) => point.cases);\r\n    const deaths = stateDataHistoryActuals.map((point) => point.deaths);\r\n    const newCases = stateDataHistoryActuals.map((point) => point.newCases);\r\n    const newDeaths = stateDataHistoryActuals.map((point) => point.newDeaths);\r\n    //METRICS DATA\r\n    const caseDensity = stateDataHistoryMetrics.map((point) => point.caseDensity);\r\n    const infectionRate = stateDataHistoryMetrics.map((point) => point.infectionRate);\r\n    const icuCapacityRatio = stateDataHistoryMetrics.map((point) => point.icuCapacityRatio);\r\n    const vaccinationsInitiatedRatio = stateDataHistoryMetrics.map((point) => point.vaccinationsInitiatedRatio);\r\n    const vaccinationsCompletedRatio = stateDataHistoryMetrics.map((point) => point.vaccinationsCompletedRatio);\r\n    const date = stateDataHistoryMetrics.map((point) => point.date);\r\n    //AREA GRAPH\r\n\r\n    const casesData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = cases[i];\r\n        casesData.push(newRow);\r\n    }\r\n\r\n    const deathsData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = deaths[i];\r\n        deathsData.push(newRow);\r\n    }\r\n\r\n    const newCasesData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = newCases[i];\r\n        newCasesData.push(newRow);\r\n    }\r\n\r\n    const newDeathsData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = newDeaths[i];\r\n        newDeathsData.push(newRow);\r\n    }\r\n\r\n    const caseDensityData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = caseDensity[i];\r\n        caseDensityData.push(newRow);\r\n    }\r\n\r\n    const infectionRateData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = infectionRate[i];\r\n        infectionRateData.push(newRow);\r\n    }\r\n\r\n    const icuCapacityRatioData = [];\r\n    for (let i = 220; i < date.length; i++) {\r\n        const counter = 0;\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = icuCapacityRatio[i];\r\n        icuCapacityRatioData.push(newRow);\r\n    }\r\n    \r\n\r\n    const vaccinationsInitiatedRatioData = [];\r\n    for (let i = 388; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = vaccinationsInitiatedRatio[i];\r\n        vaccinationsInitiatedRatioData.push(newRow);\r\n    }\r\n\r\n    const vaccinationsCompletedRatioData = [];\r\n    for (let i = 388; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = vaccinationsCompletedRatio[i];\r\n        vaccinationsCompletedRatioData.push(newRow);\r\n    }\r\n\r\n    function getNum(val) {\r\n        if (isNaN(val)) {\r\n            return 0;\r\n        }\r\n        return val;\r\n    }\r\n\r\n    function verifyData(val) {\r\n        if (val === null) {\r\n            return 0;\r\n        }\r\n        else if (val === undefined) {\r\n            return 0;\r\n        }\r\n        else if (isNaN(val)) {\r\n            return 0;\r\n        }\r\n        return val;\r\n    }\r\n\r\n   {/* function verifyData2(val) {\r\n        if (val === null) {\r\n            console.log(i)\r\n            return val;\r\n        }\r\n        else if (val === undefined) {\r\n            return 0;\r\n        }\r\n        else if (isNaN(val)) {\r\n            return 0;\r\n        }\r\n        return val;\r\n    }\r\n*/}\r\n\r\n    \r\n    useEffect(() => {\r\n      dispatch(loadStateData());\r\n    }, [dispatch]);\r\n    // GET DATA\r\n    const { stateData } = useSelector(\r\n        (state) => state.stateDataToday //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n    );\r\n    if (loading) {\r\n        return <p>Data is loading..</p>;\r\n    }\r\n{/*    if (error || !Array.isArray(stateData)) {\r\n        return <p>There was an error loading your data!</p>;\r\n    }\r\n*/}\r\n\r\n    return (\r\n        <>\r\n        <StateCodeStateCode />\r\n        <Grid className={classes.container} spacing={4} container>\r\n            <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Reported Cases\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(stateData.totalCases)}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Total cases reported in the state since the inception of Covid-19 in the United States.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={casesData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Reported Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(stateData.totalDeaths)}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Total deaths reported in the state since the inception of Covid-19 in the United States.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={deathsData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            New Cases Today\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(stateData.newCases)}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            New cases reported today in the state.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={newCasesData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            New Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(stateData.newDeaths)}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            New deaths reported today in the state.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={newDeathsData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Cases per 100k People\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(Math.round(stateData.caseDensity))}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Number of infected people per 100,000 people.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={caseDensityData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Infection Rate\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(stateData.infectionRate).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            The rate of spread by each individual.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={infectionRateData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 1000000) {\r\n                            return `${Math.round(value / 1000000)}m`\r\n                        }\r\n                        if (value > 1000) {\r\n                            return `${Math.round(value / 1000)}k`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            ICU Capacity\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(Math.round(((stateData.icuCapacityRatio) * 100)))}%\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Total ICU capacity as of today.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={icuCapacityRatioData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 0) {\r\n                            return `${Math.round(value * 100)}%`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                            {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Vaccines Administered\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(Math.round(((stateData.vaccinationsInitiatedRatio) * 100)))}%\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Total number of people who have recieved the first dose of the vaccine.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={vaccinationsInitiatedRatioData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 0) {\r\n                            return `${Math.round(value * 100)}%`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n                </Grid>\r\n                <Grid className={classes.grid} xs={12} sm={6} md={6} item>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardContent}>\r\n                      <CardContent className={classes.cardContent2}>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            Vaccines Completed\r\n                        </Typography>\r\n                        <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\r\n                            {verifyData(Math.round(((stateData.vaccinationsCompletedRatio) * 100)))}%\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" align=\"left\" color=\"textSecondary\" gutterBottom>\r\n                            {stateData.date}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\r\n                            Total number of people who are now fully vaccinated.\r\n                        </Typography>\r\n                        </CardContent>\r\n                        <ResponsiveContainer width={'100%'} height={250}>\r\n                        <AreaChart margin={{top: 10, right: 30, left: 0, bottom: 0, }} width={500} height={250} data={vaccinationsCompletedRatioData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                        <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                        if (date.getDate() %1 === 0) {\r\n                            return format(date, \"MMM, d\")\r\n                            }\r\n                            return \"\";\r\n                        }}\r\n                        />\r\n                        <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={5} tickFormatter={num =>{const value = num;\r\n                        if (value > 0) {\r\n                            return `${Math.round(value * 100)}%`\r\n                        }\r\n                        return value;\r\n                        }} />\r\n                        {/* <Tooltip content={<CustomTooltip />} /> */}\r\n                        <CartesianGrid opacity={0.1} vertical={false} />\r\n                        </AreaChart>\r\n                        </ResponsiveContainer>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    </>\r\n    );\r\n};\r\n\r\n\r\nfunction CustomTooltip({active, payload, label}) {\r\n    if (active) {\r\n        return (\r\n        <div className=\"tooltip\" >\r\n            <h4>{format(parseISO(label), \"eeee, d MMM, yyyy\")}</h4>\r\n            <p>\r\n                {payload[0].value} Cases\r\n                {console.log(payload[0].value)}\r\n            </p>\r\n        </div>\r\n        )\r\n    }\r\n    return <p>LOADING</p>;\r\n}\r\n\r\n\r\nexport default DataCards;\r\n\r\n{/*\r\n            <Grid container spacing={5} className={classes.grid}>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        {stateData}\r\n                    </Paper>\r\n                    <h1>{stateData}</h1>\r\n                </Grid>\r\n            </Grid>\r\n*/}","import '../App.css';\r\n//REDUX\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadStateDataHistory } from '../actions/stateDataHistoryAction';\r\nimport State from './State';\r\n//STYLING\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { LineChart, Line, AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip  } from 'recharts';\r\nimport { format, parseISO, subDays } from \"date-fns\";\r\n\r\nfunction HomeGraphs() {\r\n    //FETCH STATE HISTORY DATA\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n    const [data, setData] = useState();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadStateDataHistory());\r\n      }, [dispatch]);\r\n      // GET DATA\r\n      const { stateDataHistoryActuals } = useSelector(\r\n          (state) => state.stateHistory //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n      );\r\n      useEffect(() => {\r\n        dispatch(loadStateDataHistory());\r\n      }, [dispatch]);\r\n      // GET DATA\r\n      const { stateDataHistoryMetrics } = useSelector(\r\n          (state) => state.stateHistory //IN REDUX THE DEVTOOL THE STATE I WANT IS CALLED 'STATES'\r\n      );\r\n    //ACTUALS DATA\r\n    const cases = stateDataHistoryActuals.map((point) => point.cases);\r\n    const deaths = stateDataHistoryActuals.map((point) => point.deaths);\r\n    const newCases = stateDataHistoryActuals.map((point) => point.newCases);\r\n    const newDeaths = stateDataHistoryActuals.map((point) => point.newDeaths);\r\n    //METRICS DATA\r\n    const caseDensity = stateDataHistoryMetrics.map((point) => point.caseDensity);\r\n    const infectionRate = stateDataHistoryMetrics.map((point) => point.infectionRate);\r\n    const icuCapacityRatio = stateDataHistoryMetrics.map((point) => point.icuCapacityRatio);\r\n    const vaccinationsInitiatedRatio = stateDataHistoryMetrics.map((point) => point.vaccinationsInitiatedRatio);\r\n    const vaccinationsCompletedRatio = stateDataHistoryMetrics.map((point) => point.vaccinationsCompletedRatio);\r\n    const date = stateDataHistoryMetrics.map((point) => point.date);\r\n    //LINE GRAPH\r\n    const chartData = [];\r\n    for (let i = 0; i < date.length; i++) {\r\n        const newRow = {};\r\n        newRow.name = date[i];\r\n        newRow.data = cases[i];\r\n        chartData.push(newRow);\r\n    }\r\n\r\n    return (\r\n            <StateHistory>\r\n                <Graphs>\r\n                    <h1>HomeGraphs</h1>\r\n                    {/*{console.log(cases)}*/}\r\n                    <div style={{marginLeft: 30 + 'px'}}>\r\n                    <AreaChart width={800} height={500} data={chartData}>\r\n                        <defs>\r\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.1} />\r\n                                <stop offset=\"50%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n                                <stop offset=\"70%\" stopColor=\"#2451B7\" stopOpacity={0.025} />\r\n                                <stop offset=\"80%\" stopColor=\"#2451B7\" stopOpacity={0.0} />\r\n                                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.00} />\r\n\r\n                            </linearGradient>\r\n                        </defs>\r\n                    <Area type=\"monotone\" dataKey=\"data\" stroke=\"#2451B7\" fill=\"url(#color\" />\r\n                    <XAxis dataKey=\"name\" axisLine={false} tickLine={false} tickCount={2} tickFormatter={str => {const date = parseISO(str);\r\n                    if (date.getDate() %1 === 0) {\r\n                        return format(date, \"MMM, d\")\r\n                        }\r\n                        return \"\";\r\n                    }}\r\n                     />\r\n                    <YAxis dataKey=\"data\" axisLine={false} tickLine={false} tickCount={6} tickFormatter={num =>{const value = num;\r\n                    if (value > 1000000) {\r\n                        return `${value / 1000000}m`\r\n                    }\r\n                    if (value > 1000) {\r\n                        return `${value / 1000}k`\r\n                    }\r\n                    return value;\r\n                    }} />\r\n                    <Tooltip content={<CustomTooltip />} />\r\n                    <CartesianGrid opacity={0.1} vertical={false} />\r\n                    </AreaChart>\r\n                    {console.log(vaccinationsCompletedRatio)}\r\n                    </div>\r\n                </Graphs>\r\n            </StateHistory>\r\n    );\r\n};\r\n\r\nfunction CustomTooltip({active, payload, label}) {\r\n    if (active) {\r\n        return (\r\n        <div className=\"tooltip\" >\r\n            <h4>{format(parseISO(label), \"eeee, d MMM, yyyy\")}</h4>\r\n            <p>\r\n                {payload[0].value} Cases\r\n            </p>\r\n        </div>\r\n        )\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default HomeGraphs;\r\n\r\nconst StateHistory = styled(motion.div)`\r\n\r\n`;\r\n\r\nconst Graphs = styled(motion.div)`\r\n\r\n`;","import '../App.css';\r\n//REDUX\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadStateData } from '../actions/stateAction';\r\nimport State from '../components/State';\r\n//STYLING\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport DataCards from '../components/DataCards';\r\nimport HomeGraphs from '../components/HomeGraphs';\r\n\r\nfunction Home() {\r\n    return (\r\n        <DataCards />\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../App.css';\r\n//STYLING\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n\r\nfunction TopBar() {\r\n    return (\r\n        <TopBarContainer>\r\n            <h1>\r\n                project\r\n                <span>BREATHE</span>\r\n            </h1>\r\n        </TopBarContainer>\r\n    )\r\n}\r\n\r\nexport default TopBar;\r\n\r\n\r\nconst TopBarContainer = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);\r\n    width: 100%;\r\n    padding: 10px;\r\n    top: 0;\r\n    background-color: white;\r\n    h1 {  \r\n        margin-left: 20px;\r\n        font-size: 21px;\r\n        color: #0e1111;\r\n    }\r\n    span {\r\n        font-size: 21px;\r\n        color: #87ceff;\r\n    }\r\n\r\n\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nfunction Announcement() {\r\n    return (\r\n        <>\r\n            <Card>\r\n                <AnnouncementContainer>\r\n                    <h1>Project Breathe</h1>\r\n                    <p>The goal of Project Breathe is to keep you up-to-date on Covid-19. By using data from an API (that updates every day) you'll get a better idea of when\r\n                    the pandemic will officially be over. Future features will likely include a county heat map of each state.</p>\r\n                </AnnouncementContainer>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nconst Card = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    align-self: center;\r\n    text-align: center;\r\n    margin-top: 0px;\r\n    width: 100%;\r\n`;\r\n\r\nconst AnnouncementContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    align-self: center;\r\n    margin: 30px 0px 0px 0px;\r\n    border: 0.5px solid rgba(0, 0, 0, 0.1);\r\n    max-width: 650px;\r\n    width: 55%;\r\n    box-shadow: 4px 4px 7px rgb(5, 5, 5, 0.2);\r\n    border-radius: 5px;\r\n    @media (max-width: 900px) {\r\n        width: 80%;\r\n    }\r\n    h1 {\r\n        width: 75%;\r\n        margin-top: 30px;\r\n        margin-bottom: 25px;\r\n    }\r\n    p {\r\n        width: 75%;\r\n        margin-bottom: 25px;\r\n        line-height: 30px;\r\n    }\r\n    span {\r\n        width: 75%;\r\n        font-weight: bold;\r\n        text-decoration: underline;\r\n    }\r\n\r\n`;\r\n\r\nexport default Announcement;\r\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\n//COMPONENTS AND PAGES\nimport Home from './pages/Home';\nimport TopBar from './components/TopBar';\nimport { set } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Announcement from './components/Announcement';\n\nfunction App() {\n  return (\n  <>\n      <TopBar />\n      <Announcement />\n      <Home />\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = { stateData: [] };\r\n\r\n\r\nconst stateDataReducer = (state=initState, action) => {\r\n    switch(action.type){\r\n        case \"FETCH_STATE_DATA\":\r\n            return {...state,\r\n            stateData: action.payload\r\n        };\r\n        default:\r\n            return {...state};\r\n    };\r\n};\r\n\r\n//totalCases\r\n\r\n//ACTION CREATOR\r\n//const fetchGames = () => {\r\n    //return{\r\n        //type: \"FETCH_GAMES\",\r\n    //};\r\n//};\r\n\r\nexport default stateDataReducer;","const initState = { stateDataHistoryActuals: [], stateDataHistoryMetrics: [] };\r\n\r\n\r\nconst stateDataHistoryReducer = (state=initState, action) => {\r\n    switch(action.type){\r\n        case \"FETCH_STATE_DATA_HISTORY\":\r\n            return {...state,\r\n            stateDataHistoryActuals: action.payload.historyActuals,\r\n            stateDataHistoryMetrics: action.payload.historyMetrics\r\n        };\r\n        default:\r\n            return {...state};\r\n    };\r\n};\r\n\r\n//ACTION CREATOR\r\n//const fetchGames = () => {\r\n    //return{\r\n        //type: \"FETCH_GAMES\",\r\n    //};\r\n//};\r\n\r\nexport default stateDataHistoryReducer;","const initState = { codeInitialsTest: [] };\r\n\r\n\r\nconst stateCodeInitialsReducer = (state=initState, action) => {\r\n    switch(action.type){\r\n        case \"GET_CODE_INITIALS\":\r\n            return {...state,\r\n                codeInitialsTest: action.payload\r\n        };\r\n        default:\r\n            return {...state};\r\n    };\r\n};\r\n\r\nexport default stateCodeInitialsReducer;","const initState = { stateURL: [] };\r\n\r\n\r\nconst stateURLReducer = (state=initState, action) => {\r\n    switch(action.type){\r\n        case \"GET_STATE_URL\":\r\n            return {...state,\r\n                stateURL: action.payload\r\n        };\r\n        default:\r\n            return {...state};\r\n    };\r\n};\r\n\r\nexport default stateURLReducer;","import { combineReducers } from 'redux';\r\nimport stateDataReducer from './stateDataReducer';\r\nimport stateDataHistoryReducer from './stateDataHistoryReducer';\r\nimport stateCodeInitialsReducer from './stateCodeInitialsReducer';\r\nimport stateURLReducer from './stateURLReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    stateDataToday: stateDataReducer,\r\n    stateHistory: stateDataHistoryReducer,\r\n    stateInitials: stateCodeInitialsReducer,\r\n    stateURL: stateURLReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//Redux setup\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './reducers/index';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(thunk))\n  );\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}